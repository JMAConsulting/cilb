<?php

use Drupal\webform\Utility\WebformFormHelper;
use Drupal\webform\Entity\Webform;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\block\Entity\Block;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function cilb_candidate_registration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == "webform_submission_register_english_add_form") {
    // Attach library
    $form['#attached']['library'][] = 'cilb_candidate_registration/candidate_registration';
    $form['#attached']['library'][] = 'cilb_candidate_registration/exam_selection';
    $form['#attached']['library'][] = 'cilb_candidate_registration/selected_exam_info';


    // Redirect to /register if notification block is disabled
    $elements = WebformFormHelper::flattenElements($form);
    $original_markup = $elements['user_identification_markup']['#markup'];

    if(! _is_block_active('olivero_candidatenotice')) {
      $updated_markup = preg_replace(
        '/https:\/\/cilb\.jmaconsulting\.biz\/(es\/)?register-notification/',
        'https://cilb.jmaconsulting.biz/register',
        $original_markup
      );
      $elements['user_identification_markup']['#markup'] = $updated_markup;
    }
  }
}

function cilb_candidate_registration_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface && $node->id() == 4) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $block_id = 'olivero_candidatenotice';

    // Redirect to webform if notification block is disabled
    if (! _is_block_active($block_id)) {
      if($current_language == 'es') {
        $redirect_url = Url::fromUri('internal:/es/exam-registration');
      } else {
        $redirect_url = Url::fromUri('internal:/exam-registration');
      }
      $response = new RedirectResponse($redirect_url->toString());
      $response->send();
      exit();
    }
  }
}

function _is_block_active($block_id) {
  $block = Block::load($block_id);
  return $block && $block->status();
}

/**
 * Implements hook_views_query_alter().
 */
function cilb_candidate_registration_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'exam_type' && $view->current_display == 'entity_reference_1') {

    // Check to make sure exams types are not full
    $events = \Civi\Api4\Event::get(FALSE)
      ->addSelect('option_value.id')
      ->addJoin('OptionValue AS option_value', 'LEFT', ['event_type_id', '=', 'option_value.value'])
      ->addWhere('is_active', '=', TRUE)
      //->addWhere('start_date', '>', 'now')
      ->addWhere('is_online_registration', '=', TRUE)
      ->addClause('OR', ['max_participants', 'IS NULL'], ['remaining_participants', '>', 0])
      ->addWhere('option_value.option_group_id', '=', 15)
      ->addGroupBy('event_type_id')
      ->addGroupBy('option_value.id')
      ->execute();

    $valid_option_ids = [];
    foreach ($events as $event) {
      $valid_option_ids[] = $event['option_value.id'];
    }

    if (!empty($valid_option_ids)) {
      $query->addWhere('AND', 'civicrm_option_value.id', $valid_option_ids, 'IN');
    } else {
      $query->addWhere('AND', 'civicrm_option_value.id', '0', '=');
    }

  } elseif ($view->id() == 'exams' && $view->current_display == 'entity_reference_1') {

    // Check to make sure exams are not full
    $events = \Civi\Api4\Event::get(FALSE)
      ->addSelect('id', 'Exam_Details.Exam_Part', 'event_type_id')
      ->addWhere('is_active', '=', TRUE)
      //->addWhere('start_date', '>', 'now')
      ->addWhere('is_online_registration', '=', TRUE)
      ->addClause('OR', ['max_participants', 'IS NULL'], ['remaining_participants', '>', 0])
      ->execute();

    // check for previously passed exams
    //
    // NOTE: the logic is different depending on whether the Exam Part is "Category Specific":
    //   category specific => only exclude if passed the same exam for the same part + same category
    //   otherwise => exclude if passed any exam for the same part, regardless of category
    $categorySpecificPasses = [];
    $generalPasses = [];

    // only check if someone is logged in
    if (!empty(\CRM_Core_Session::getLoggedInContactID())) {
	
      $examPartCategorySpecificity = \Civi\Api4\OptionValue::get(FALSE)
        ->addWhere('option_group_id:name', '=', 'Exam_Part')
	->addSelect('value', 'Exam_Part_Options.Category_Specific')
        ->execute()
        ->indexBy('value')
        ->column('Exam_Part_Options.Category_Specific');

      $passedExams = \Civi\Api4\Participant::get(FALSE)
        ->addSelect('event_id.Exam_Details.Exam_Part', 'event_id.event_type_id')
        ->addJoin('Event AS event', 'INNER', ['event.id', '=', 'event_id'])
        ->addWhere('contact_id', '=', \CRM_Core_Session::getLoggedInContactID())
        ->addWhere('status_id:name', '=', 'Pass')
        ->execute();


      foreach ($passedExams as $passedExam) {
	$passedExamPart = $passedExam['event_id.Exam_Details.Exam_Part'];
	if ($examPartCategorySpecificity[$passedExamPart]) {
	  $passedCategory = $passedExam['event_id.event_type_id'];
	  // initialise array for new category if not seen before
          $categorySpecificPasses[$passedCategory] ??= []; 
	  $categorySpecificPasses[$passedCategory][] = $passedExamPart;
	} else {
          $generalPasses[] = $passedExamPart;
	}
      }
    }
    $valid_events = [];
    foreach ($events as $event) {
      if (in_array($event['Exam_Details.Exam_Part'] ?? '', $generalPasses)) {
        // we've passed an exam for the same part, and its not category specific => skip
	continue;
      }
      $passesThisCategory = $categorySpecificPasses[$event['event_type_id']] ?? [];

      if (in_array($event['Exam_Details.Exam_Part'] ?? '', $passesThisCategory)) {
	// we've passed and exam for the same part and category => skip
	continue;
      }

      // no matching previous pass => add to valid events
      $valid_events[] = $event['id'];
    }

    if (!empty($valid_events)) {
      $query->addWhere('AND', 'civicrm_event.id', $valid_events, 'IN');
    } else {
      $query->addWhere('AND', 'civicrm_event.id', '0', '=');
    }
  }
}
